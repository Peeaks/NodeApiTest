import * as express from 'express'
import * as bodyParser from 'body-parser'
import * as mongoose from 'mongoose'
import * as cookieParser from 'cookie-parser'
import Controller from './interfaces/controller.interface'
import errorMiddleware from './middleware/error.middleware'

class App {
  public app: express.Application

  constructor(controllers: Controller[]) {
    this.app = express()

    const swaggerUi = require('swagger-ui-express');
    const swaggerJsdoc = require('swagger-jsdoc');

    const options = {
      swaggerDefinition: {
        // Like the one described here: https://swagger.io/specification/#infoObject
        info: {
          title: 'Test API',
          version: '1.0.0',
          description: 'Test Express API with autogenerated swagger doc',
        },
      },
      // List of files to be processes. You can also set globs './routes/*.js'
      apis: ['dist/product/*.js'],
    };

    console.log(options.apis)

    const specs = swaggerJsdoc(options);

    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs))

    this.connectToTheDatabase()
    this.initializeMiddleware()
    this.initializeControllers(controllers)
  }

  public listen() {
    this.app.listen(process.env.PORT, () => {
      console.log(`App listening on port ${process.env.PORT}`)
    })
  }

  private connectToTheDatabase() {
    const {
      MONGO_USER,
      MONGO_PASSWORD,
      MONGO_PATH,
    } = process.env;
    mongoose.connect(`mongodb://${MONGO_PATH}`);
  }

  private initializeMiddleware() {
    this.app.use(bodyParser.json())
    this.app.use(cookieParser())

    // ErrorMiddleware needs to be added at the end of the stack
    this.app.use(errorMiddleware)
  }

  private initializeControllers(controllers) {
    controllers.forEach((controller) => {
      this.app.use('/', controller.router)
    })
  }
}

export default App
